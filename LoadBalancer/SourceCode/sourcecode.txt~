package com.PA3.Client.ClientProgram;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;

import com.amazonaws.AmazonClientException;
import com.amazonaws.AmazonServiceException;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.auth.profile.ProfileCredentialsProvider;
import com.amazonaws.regions.Region;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient;
import com.amazonaws.services.sqs.AmazonSQS;
import com.amazonaws.services.sqs.AmazonSQSClient;
import com.amazonaws.services.sqs.model.CreateQueueRequest;
import com.amazonaws.services.sqs.model.SendMessageRequest;

public class Client 
{
	static AmazonDynamoDBClient dynamoDB;
	private static final String AWS_ACCESS_KEY_ID = "AKIAJUBRMZPVPYVAW3WA";
	private static final String AWS_SECRET_ACCESS_KEY = "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";
    public static void main(String[] args) throws Exception 
    {
    	String queueName = "";
		String workLoadFile="";

		int i=0;
		int numOfWorkers=0;
		while (i<args.length) {
			if (args[i].equals("client")) {
				i+=1;
				if(args[i].equals("-s")){
					i+=1;
					queueName=args[i];
					i+=1;
					if(args[i].equals("-w")){
						i+=1;
						workLoadFile=args[i];
						break;
					}
				}
			}
		}
		 File filename = new File(workLoadFile);
			BufferedReader br = new BufferedReader(new FileReader(filename));
		
		BasicAWSCredentials credentials = new BasicAWSCredentials(AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY);
		AmazonSQS sqs = new AmazonSQSClient(credentials);
		Region usWest2 = Region.getRegion(Regions.US_WEST_2);
		sqs.setRegion(usWest2);
       
        
        try 
        {   
            // Create a queue
            CreateQueueRequest createQueueRequest = new CreateQueueRequest(queueName);
            String myQueueUrl = sqs.createQueue(createQueueRequest).getQueueUrl();
            long start = System.currentTimeMillis();
            // Put messages
            String tasks = br.readLine();

    		while(!(tasks==null))
    		{
    			sqs.sendMessage(new SendMessageRequest(myQueueUrl, tasks));
    			tasks = br.readLine();
    		}        

    		long end = System.currentTimeMillis();
    		long time = (end-start)/1000;
        } 
        catch (AmazonServiceException ase) 
        {
            System.out.println("Caught an AmazonServiceException, which means your request made it " +
                    "to Amazon SQS, but was rejected with an error response for some reason.");
            System.out.println("Error Message:    " + ase.getMessage());
            System.out.println("HTTP Status Code: " + ase.getStatusCode());
            
            System.out.println("AWS Error Code:   " + ase.getErrorCode());
            System.out.println("Error Type:       " + ase.getErrorType());
            System.out.println("Request ID:       " + ase.getRequestId());
        } 
        catch (AmazonClientException ace) 
        {
            System.out.println("Caught an AmazonClientException, which means the client encountered " +
                    "a serious internal problem while trying to communicate with SQS, such as not " +
                    "being able to access the network.");
            System.out.println("Error Message: " + ace.getMessage());
        }
        br.close();
    }
}


package com.PA3.Worker.RemoteWorker;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;

import com.amazonaws.AmazonClientException;
import com.amazonaws.AmazonServiceException;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.auth.profile.ProfileCredentialsProvider;
import com.amazonaws.regions.Region;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient;
import com.amazonaws.services.dynamodbv2.model.AttributeDefinition;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.amazonaws.services.dynamodbv2.model.ComparisonOperator;
import com.amazonaws.services.dynamodbv2.model.Condition;
import com.amazonaws.services.dynamodbv2.model.CreateTableRequest;
import com.amazonaws.services.dynamodbv2.model.KeySchemaElement;
import com.amazonaws.services.dynamodbv2.model.KeyType;
import com.amazonaws.services.dynamodbv2.model.ProvisionedThroughput;
import com.amazonaws.services.dynamodbv2.model.PutItemRequest;
import com.amazonaws.services.dynamodbv2.model.PutItemResult;
import com.amazonaws.services.dynamodbv2.model.ScalarAttributeType;
import com.amazonaws.services.dynamodbv2.model.ScanRequest;
import com.amazonaws.services.dynamodbv2.model.ScanResult;
import com.amazonaws.services.dynamodbv2.model.TableDescription;
import com.amazonaws.services.dynamodbv2.util.Tables;
//import com.amazonaws.services.dynamodbv2.util.TableUtils;
import com.amazonaws.services.sqs.AmazonSQS;
import com.amazonaws.services.sqs.AmazonSQSClient;
import com.amazonaws.services.sqs.model.CreateQueueRequest;
import com.amazonaws.services.sqs.model.DeleteMessageRequest;
import com.amazonaws.services.sqs.model.Message;
import com.amazonaws.services.sqs.model.ReceiveMessageRequest;

public class Worker {
	static AmazonDynamoDBClient dynamoDB;
	private static final String AWS_ACCESS_KEY_ID = "AKIAJUBRMZPVPYVAW3WA";
	private static final String AWS_SECRET_ACCESS_KEY = "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";

	public static void main(String[] args) throws Exception {
		String queueName = args[0];
		int numOfMessages = Integer.parseInt(args[1]);
		BasicAWSCredentials credentials = new BasicAWSCredentials(AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY);
		AmazonSQS sqs = new AmazonSQSClient(credentials);
		dynamoDB = new AmazonDynamoDBClient(credentials);
		Region usWest2 = Region.getRegion(Regions.US_WEST_2);
		dynamoDB.setRegion(usWest2);
		sqs.setRegion(usWest2);
		try {
			String tableName = "Task_List";

			if (Tables.doesTableExist(dynamoDB, tableName)) {
				System.out.println("Table " + tableName + " is already ACTIVE");
			} else {
				CreateTableRequest createTableRequest = new CreateTableRequest().withTableName(tableName)
						.withKeySchema(new KeySchemaElement().withAttributeName("name").withKeyType(KeyType.HASH))
						.withAttributeDefinitions(new AttributeDefinition().withAttributeName("name")
								.withAttributeType(ScalarAttributeType.S))
						.withProvisionedThroughput(
								new ProvisionedThroughput().withReadCapacityUnits(1L).withWriteCapacityUnits(1L));
				TableDescription createdTableDescription = dynamoDB.createTable(createTableRequest)
						.getTableDescription();
				System.out.println("Created Table: " + createdTableDescription);

				Tables.waitForTableToBecomeActive(dynamoDB, tableName);
				
			}
			CreateQueueRequest createQueueRequest = new CreateQueueRequest(queueName);
			String queueUrl = sqs.createQueue(createQueueRequest).getQueueUrl();
			ReceiveMessageRequest receiveMessageRequest = new ReceiveMessageRequest(queueUrl);

			long start = System.currentTimeMillis();
			List<Message> messages = sqs.receiveMessage(receiveMessageRequest).getMessages();
			int counter=0;
			while (true) {
		
				receiveMessageRequest = new ReceiveMessageRequest(queueUrl);
				Message currentMessages = sqs.receiveMessage(receiveMessageRequest).getMessages().remove(0);
				
				String body = currentMessages.getBody();
				String messageID = currentMessages.getMessageId();

				// Search
				HashMap<String, Condition> scanFilter = new HashMap<String, Condition>();
				Condition condition = new Condition().withComparisonOperator(ComparisonOperator.EQ.toString())
						.withAttributeValueList(new AttributeValue(messageID);
				scanFilter.put("name", condition);
				ScanRequest scanRequest = new ScanRequest(tableName).withScanFilter(scanFilter);
				ScanResult scanResult = dynamoDB.scan(scanRequest);
			
				if (scanResult.getItems().isEmpty()) {
					System.out.println("Message not in DynamoDB");
					Map<String, AttributeValue> item = newItem(messageID, body);
					PutItemRequest putItemRequest = new PutItemRequest(tableName, item);
					PutItemResult putItemResult = dynamoDB.putItem(putItemRequest);
					// System.out.println("Result: " + putItemResult);
					Thread.sleep(Long.parseLong(body));
					counter+=1;
				} else {
				}
				String messageReceiptHandle = currentMessages.getReceiptHandle();
				sqs.deleteMessage(new DeleteMessageRequest(queueUrl, messageReceiptHandle));
				if(counter==numOfMessages){
					break;
				}
			}
			// }
			long end = System.currentTimeMillis();
			long time = (end - start);
			System.out.println("Time Taken By Worker: " + time + " ms.");
		} catch (AmazonServiceException ase) {
			System.out.println("Caught an AmazonServiceException, which means your request made it "
					+ "to Amazon SQS, but was rejected with an error response for some reason.");
			System.out.println("Error Message:    " + ase.getMessage());
			System.out.println("HTTP Status Code: " + ase.getStatusCode());

			System.out.println("AWS Error Code:   " + ase.getErrorCode());
			System.out.println("Error Type:       " + ase.getErrorType());
			System.out.println("Request ID:       " + ase.getRequestId());
		} catch (AmazonClientException ace) {
			System.out.println("Caught an AmazonClientException, which means the client encountered "
					+ "a serious internal problem while trying to communicate with SQS, such as not "
					+ "being able to access the network.");
			System.out.println("Error Message: " + ace.getMessage());
		}
	}

	private static Map<String, AttributeValue> newItem(String name, String value) {
		Map<String, AttributeValue> item = new HashMap<String, AttributeValue>();
		item.put("name", new AttributeValue(name));
		item.put("value", new AttributeValue(value));
		return item;
	}
}

package com.PA3.cloud;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import com.SQS.sample.*;

public class Scheduler {
	public static float start;

	public static void main(String[] args) {

		try {
			
			String type = "";
			int n = 4;
			String fileName=args[0];
				Queue q = new Queue();
				BufferedReader br = new BufferedReader(new FileReader(fileName));
				
				 String ln="" , inf = "";
			        ln = br.readLine();
			        
			        while(ln != null){
			       			        inf = inf  + ln + "%";
			       			        ln = br.readLine();
			        }
			        inf = inf +"END";
				String[] d3 = inf.split("%");
				int j = 0;
				while (!d3[j].equals("END")) {
					HashMap<String, Integer> a = new HashMap<String, Integer>();
					a.put(d3[j], j);
					q.insert(a);
					j++;
				}

					start = System.currentTimeMillis();
					System.out.println(start);
					ProcessTask(q);
					res.display();


		} catch (Exception e) {
			System.out.println(e);
		}
	}


public static Queue ProcessTask(Queue q) {			
    	while(!q.isEmpty()){
    			HashMap<String, Integer> work =  q.deQueue();
    			PoolingService.insertTasKInLW(work);
    			System.out.println("Work Inserted"+work);
    	}
   		}

public static void insertTasKInLW(HashMap<String, Integer> t) 
	{
		
		String k = null;
		Integer v;
		executorService.submit(new Runnable() {
			    public void run() {
			    	try{
						
			    		System.out.println(data);
			    		int time = Integer.parseInt(data.split(" ")[1]);
			    		System.out.println("Sleep time "+time+" ms");
			    		Thread.sleep(time);
			    		HashMap<String, Integer> a = new HashMap<String, Integer>();
			            a.put(data, 0);
			            
			    		res_queue.insert(a);
			    		
			    		System.out.println("Thread is Awake");
			    		}catch(InterruptedException e){
			    			HashMap<String, Integer> a = new HashMap<String, Integer>();
			    			a.put(data, 1);
			    			res_queue.insert(a);
			    			e.printStackTrace();
			    		
			    }
			    	res_queue.display();
		}
				
		
		});
	}

}
